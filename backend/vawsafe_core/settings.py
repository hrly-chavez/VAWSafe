"""
Django settings for vawsafe_core project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
#kani sya para mo load ang backend/.env para sa encryption
import environ
import os
from cryptography.fernet import Fernet

#para ni sya sa encryption para ma migrate ang attribute nga encryptedcharfield etc
import django.utils.encoding
if not hasattr(django.utils.encoding, "force_text"):
    django.utils.encoding.force_text = django.utils.encoding.force_str


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--n8q#^8nc-n(=ww(*d4frzqy=q2eno_w!ek5=4msh6ct(ryrb!'


# Initialize env // para ni sa encryption
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

#pag load ug new fernetkey
#python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"


#kuhaon ang fernet key sa backend/.env
FERNET_KEYS = env.list("FERNET_KEYS", default=[])

# Primary key for file encryption (EncryptedFileSystemStorage)
# Reuse first FERNET_KEYS entry if available, or generate a fallback
if FERNET_KEYS:
    FERNET_KEY = FERNET_KEYS[0].encode()
else:
    # fallback key (only used if .env is missing)
     # fallback only for dev (avoid in production)
    FERNET_KEY = Fernet.generate_key()


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    #3rd party apps
    'rest_framework',
    'corsheaders',
    #Authentication and authorization
    "rest_framework_simplejwt",
    #encryption
    "fernet_fields",

    #Users apps
    'desk_officer',
    'social_worker',
    'victim',
    'dswd',
    #gibutangan nako ug apps.SharedModelConfig para sa face embeddings para sa /admin
    'shared_model.apps.SharedModelConfig',
    'auth_app',
    #extensions
    "django_extensions"
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

ROOT_URLCONF = 'vawsafe_core.urls'

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "auth_app.authentication.CookieJWTAuthentication",
        #tangtangon ni kay gigamit ang authentication.py sa auth_app
        # "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.ScopedRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'face_login': '5/minute',
    }
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'vawsafe_core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'vawsafe',
        'USER': 'postgres',
        'PASSWORD': 'Caratao123', 
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True

# Dev cookie flags (switch to Secure/None in prod cross-site)
SESSION_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SAMESITE = "Lax"
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False



from datetime import timedelta
#KANI PARA SA LOCALSTORAGE
# SIMPLE_JWT = {
#     "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
#     # "ACCESS_TOKEN_LIFETIME": timedelta(seconds=30),  # just for test
#     "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
#     "ROTATE_REFRESH_TOKENS": True, # kani kay basta ma expire ang access mo renew both access ug refresh more secure
#     # "ROTATE_REFRESH_TOKENS": False, #kani sya kay basta ma expire ang access kay mo renew new access pero same refresh less secure
# }

#KANI KAY PARA SA HTTPONLY
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),      # short
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),       # or 30/90 days if you want
    "ROTATE_REFRESH_TOKENS": True,                      # optional
    "BLACKLIST_AFTER_ROTATION": True,                   # if using blacklist app
}

# Email settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "carataojoegie@gmail.com"        # your Gmail
EMAIL_HOST_PASSWORD = "qvrt xcrf meek royf"  # ðŸ‘ˆ from Step 2
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


# settings.py PARA NI SA KATUNG FORGOT PASS
FRONTEND_URL = "http://localhost:3000"  # or your deployed React frontend URL
DEFAULT_FROM_EMAIL = "carataojoegie@gmail.com"  # or your system email